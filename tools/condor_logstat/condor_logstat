#!/usr/bin/env python
#
# Copyright 2007-2009 University Of Southern California
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os, time, datetime, popen2, sys, getopt, signal, pwd, grp


# Set some defaults
OUTPUT="/dev/stdout"
INTERVAL=300
MAXSIZE=1024
POOL=None
LOG=None


# Print usage message
def usage():
	print """Usage: %s [-o FILE] [-i INTERVAL] [-m MAXSIZE]

This script periodically prints the state and activity status of resources in a
Condor pool. The output is printed in Netlogger format.

OPTIONS

   -o | --output FILE
      The file to write NetLogger output to. Defaults to %s.
   -i | --interval SECONDS
      The number of seconds to wait between logging events. Defaults to %d.
   -m | --maxsize KB
      The maximum output file size in KB. Defaults to %d KB (1 MB, or ~2 weeks
      using 5 min interval). When the log reaches this size, its name gets a 
      .0 appended onto it and a new log is started.
   -p | --pool HOST
      The pool to query. The machine from which this service runs should have
      READ permissions for the pool. Defaults to the pool currently set in the
      local condor_config file.
   -l | --log FILE
      The log file for debugging output. Defaults to stdout.
   -h | --help
      Prints this usage message.
""" % (os.path.basename(sys.argv[0]), OUTPUT, INTERVAL, MAXSIZE)


# Print an informational message
def info(message):
	print datetime.datetime.now().isoformat(), message


# Get the value of a configuration parameter from condor
def condor_config_val(key):
	ccv = popen2.Popen4("condor_config_val %s" % key)
	val = ccv.fromchild.readline() ; ccv.fromchild.readlines()
	if ccv.wait() == 0:
		return val.strip()
	else:
		return None


# Get the condor user id's UID and GID
def get_condor_ids():
	# Try condor's CONDOR_IDS config val first
	uidgid = condor_config_val("CONDOR_IDS")
	if uidgid:
		ids = uidgid.split(".")
		ids[0] = int(ids[0])
		ids[1] = int(ids[1])
		return ids
	else:
		info("CONDOR_IDS not set")
		# Look for 'condor' user
		try:
			pw = pwd.getpwnam("condor")
			return pw[2:4]
		except KeyError:
			info("Unable to get UID/GID for user 'condor'")
			return None


# Get job statistics from condor_q
def condor_q():
	# Initialize stats
	jstatn = ['unexpanded','idle','running','removed','completed','held']
	jstats = {'unexpanded':0, 'idle':0, 'running':0, 
			  'removed':0, 'completed':0, 'held':0, 'total':0}
	
	# Run condor_q
	cmd = "%s/bin/condor_q" % CONDOR_HOME
	if POOL: cmd += " -pool %s -global" % POOL
	cmd += " -format '%s\n' JobStatus"
	cq = popen2.Popen4(cmd)
	stats = cq.fromchild.readlines()
	if cq.wait() == 0:
		for stat in stats:
			if 'empty' in stat: continue
			try:
				stat = int(stat)
				jstats[jstatn[stat]] += 1
			except ValueError:
				print stats
				return None
	else:
		print stats
		return None

	# Set the total number of jobs
	jstats['total'] = reduce(lambda x,y: x+y, jstats.values())
	
	return jstats


# Get machine statistics from condor_status	
def condor_status():
	# Initialize stats
	sstats = {'owner':0, 'unclaimed':0, 'matched':0, 'claimed':0, 
			  'preempting':0, 'backfill':0, 'total':0}
	
	# Run condor_status
	cmd = "%s/bin/condor_status" % CONDOR_HOME
	if POOL:
		cmd += " -pool %s" % POOL
	cmd += " -format '%s\n' State"
	cs = popen2.Popen4(cmd)
	stats = cs.fromchild.readlines()
	if cs.wait() ==0:
		for stat in stats:
			stat = stat[:-1].lower()
			if stat: sstats[stat] += 1
	else:
		return None

	# Add up the total number of slots
	sstats['total'] = reduce(lambda x,y: x+y, sstats.values())
	
	return sstats


# Trap signals and exit gracefully
def trap(sig, frame):
	info("Shutting down...")
	sys.exit(0)


# Install signal handlers
signal.signal(signal.SIGTERM, trap)
signal.signal(signal.SIGINT, trap)
signal.signal(signal.SIGHUP, trap)
signal.signal(signal.SIGUSR1, trap)
signal.signal(signal.SIGUSR2, trap)


# If running as root, set effective uid & gid to condor user
if os.getuid()==0:
	ids = get_condor_ids()
	if ids == None:
		info("No condor user found")
		info("Cannot run command as root")
		sys.exit(1)
	os.setgid(ids[1])
	os.setuid(ids[0])

# Set umask so that any files created will be readable by all
os.umask(0022)


# Parse arguments
try:
	opts, args = getopt.getopt(sys.argv[1:], "hl:o:i:m:p:", 
					["help","log=","output=","interval=","maxsize=","pool="])
except getopt.GetoptError, err:
	# print help information and exit:
	print str(err) # will print something like "option -a not recognized"
	sys.exit(3)
for o, a in opts:
	if o in ("-h","--help"):
		usage()
		sys.exit(0)
	elif o in ("-o","--output"):
		OUTPUT=a
	elif o in ("-l","--log"):
		LOG=a
	elif o in ("-i","--interval"):
		INTERVAL=int(a)
	elif o in ("-m","--maxsize"):
		MAXSIZE=int(a)
	elif o in ("-p","--pool"):
		POOL=a
	else:
		info("unhandled argument: %s" % o)
		sys.exit(5)


# Redirect output to log
if LOG is not None:
	try:
		log = open(LOG,"a",1)
		sys.stdout.close()
		sys.stderr.close()
		sys.stdout = log
		sys.stderr = log
	except IOError, err:
		info(str(err))
		sys.exit(2)


# Find CONDOR_HOME
try:
	CONDOR_HOME = os.environ['CONDOR_HOME']
except KeyError, err:
	print "Please set CONDOR_HOME"
	sys.exit(3)


# Welcome message
info("Pool status monitor starting...")


# Loop forever collecting status
firstime = True
while True:

	# Go to sleep for a while
	if not firstime:
		time.sleep(INTERVAL)
	firstime = False

	# Get job status
	jstats = condor_q()
	if not jstats:
		info("condor_q failed")
		continue

	# Get machine status
	sstats = condor_status()
	if not sstats:
		info("condor_status failed")
		continue

	# Get timestamp
	now = datetime.datetime.utcnow()
	ts = now.strftime("%Y-%m-%dT%H:%M:%S")
	ts += ".%06dZ" % now.microsecond # For older pythons without %f

	# Create record
	rec = "ts=%s event=condor.status" % ts
	for k,v in sstats.items():
		rec += " machine.%s=%s" % (k,v)
	for k,v in jstats.items():
		rec += " job.%s=%s" % (k,v)

	# Rotate log if necessary
	if os.path.isfile(OUTPUT):
		st = os.stat(OUTPUT)
		if (st.st_size/1024) >= MAXSIZE:
			os.rename(OUTPUT,OUTPUT+".0")
	
	# Write output record
	try:
		output = open(OUTPUT,"a",1)
		output.write(rec+"\n")
		output.close()
	except IOError, err:
		info(str(err))
		sys.exit(4)


