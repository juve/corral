#!/bin/sh
#
# Copyright 2007-2009 University Of Southern California
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
 
# Create status file if not interactive
if [ ! -t 0 ]; then
	STATUS=`pwd`/status
	touch $STATUS
fi

# Write error message to stderr and to status file if not interactive
error ()
{
	echo "$@" >&2
	if [ ! -t 0 ]; then
		echo "$@" >>$STATUS
	fi
}

# Usage
CMD=`basename $0`
usage ()
{
	error """Usage: $CMD OPTIONS REQUIRED

REQUIRED

   -i | -installPath <path>
      The path to install the Condor executables.
   -l | -localPath <path>
      The path where log files should be written.
   -c | -condorHost <host:port>
      The condor central manager host.
   -t | -wallTime <minutes>
      The glidein runtime in minutes.
   -s | -site <name>
      The name of the site.
      
OPTIONS

   -it | -idleTime <minutes>
      The maximum idle time for this glidein.
   -d | -debug <level> [-debug <level> ...]
      Turn on extra debugging messages and leave local directory in place.
   -b | -gcbBroker
      The IP of the GCB broker for this glidein.
   -n | -numCpus
      The number of CPUs to allocate for this glidein.
   -h | -help
      Display this usage message.
"""
}

INSTALL_PATH=""
LOCAL_PATH=""
CONDOR_HOST=""
WALL_TIME=""
IDLE_TIME="0"
DEBUG=""
GCB_BROKER=""
NUM_CPUS=""
SITE_NAME=""
JOB_DIR="`dirname $X509_USER_PROXY 2>/dev/null || pwd`"

while [ $# -ge 1 ]; do
	case $1 in 
		-i | -installPath) INSTALL_PATH=$2 ;;
		-l | -localPath) LOCAL_PATH=$2 ;;
		-c | -condorHost) CONDOR_HOST=$2 ;;
		-t | -wallTime) WALL_TIME=$2 ;;
		-it | -idleTime) IDLE_TIME=$2 ;;
		-b | -gcbBroker) GCB_BROKER=$2 ;;
		-n | -numCpus) NUM_CPUS=$2 ;;
		-d | -debug) DEBUG="${DEBUG}$2 " ;;
		-s | -site) SITE_NAME=$2 ;;
		-h | -help) usage ; exit 1 ;;
		*) error "Invalid argument: $1" ; exit 1 ;;
	esac
	shift
	shift
done

# Check arguments
if [ -z "${INSTALL_PATH}" ]; then
	error "Must specify -installPath"
	exit 1
fi
INSTALL_PATH=`eval "echo ${INSTALL_PATH}"`

if [ -z "${LOCAL_PATH}" ]; then
	error "Must specify -localPath"
	exit 1
fi
LOCAL_PATH=`eval "echo ${LOCAL_PATH}"`

if [ -z "${CONDOR_HOST}" ]; then
	error "Must specify -condorHost"
	exit 1
fi
if [ -z "${WALL_TIME}" ]; then
	error "Must specify -wallTime"
	exit 1
fi

# Set default debug level
if [ -z "$DEBUG" ]; then
	DEBUG="D_ALWAYS"
fi

# Calculate wall time in seconds
WALL_TIME_SECONDS=`expr ${WALL_TIME} \* 60`

# Calculate idle time in seconds
IDLE_TIME_SECONDS="0"
if [ ! -z "${IDLE_TIME}" ]; then
	IDLE_TIME_SECONDS=`expr ${IDLE_TIME} \* 60`
fi

# Check install path
if [ ! -d "${INSTALL_PATH}" ]; then
	error "Install path does not exist: ${INSTALL_PATH}"
	exit 1
fi

# Create local path if it doesn't exist
if [ ! -d "${LOCAL_PATH}" ]; then
	if ! mkdir -p ${LOCAL_PATH}; then
		error "Unable to create local dir: ${LOCAL_PATH}"
		exit 1
	fi
fi

# Set condor config file
GLIDEIN_CONDOR_CONFIG=`pwd`/glidein_condor_config
if [ ! -f "${GLIDEIN_CONDOR_CONFIG}" ]; then
	error "Configuration file 'glidein_condor_config' missing"
	exit 1
fi

# Determine host name
case `uname` in
	Linux) HOSTNAME=`hostname -f` ;;
	SunOS) HOSTNAME=`uname -n` ;;
	AIX) HOSTNAME=`uname -n` ;;
	*) HOSTNAME=`hostname` ;;
esac

# Set local directory
LOCAL_DIR="${LOCAL_PATH}/${HOSTNAME}_$$"
if ! mkdir -p ${LOCAL_DIR}; then
	error "Unable to create glidein local dir: ${LOCAL_DIR}"
	exit 1
fi

# Copy config file
if ! cp ${GLIDEIN_CONDOR_CONFIG} ${LOCAL_DIR}; then
	error "Unable to copy glidein_condor_config to ${LOCAL_DIR}"
	exit 1
fi

# Create log and execute dirs
if ! mkdir -p ${LOCAL_DIR}/log; then
	error "Unable to create log dir: ${LOCAL_DIR}/log"
	exit 1
fi
if ! mkdir -p ${LOCAL_DIR}/execute; then
	error "Unable to create execute dir: ${LOCAL_DIR}/execute"
	exit 1
fi

# GCB Broker stuff
if [ -z "${GCB_BROKER}" ]; then
	GCB_ENABLE="False"
else
	GCB_ENABLE="True"
fi

# Set environment
export CONDOR_CONFIG=${LOCAL_DIR}/glidein_condor_config
# We set LOG and EXECUTE here so they can't be changed.
export _condor_LOG=${LOCAL_DIR}/log
export _condor_EXECUTE=${LOCAL_DIR}/execute
# NUM_CPUS is special because they don't allow you to use an expression to
# define it. So I can't say NUM_CPUS = $(GLIDEIN_NUM_CPUS) in the config
# file.
if [ ! -z "${NUM_CPUS}" ]; then
	export _condor_NUM_CPUS=${NUM_CPUS}
fi

# Determine IP address. Favor public IPs over private IPs.
ips=`/sbin/ifconfig | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1 }' | grep -v '127\.'`
for ip in ${ips}; do
	if [ -z "${IP_ADDR}" ] || ! echo ${ip} | grep -q -E '(^192\.)|(^10\.)|(^172\.((1[6-9])|([2][0-9])|(3[0-1]))\.)'; then
 		IP_ADDR=$ip
	fi
done
if [ -z "${IP_ADDR}" ]; then
	error "Unable to determine IP address for $HOSTNAME"
	exit 1
fi

# Create lock dir
GLIDEIN_LOCK=/tmp/glidein/lock
if ! mkdir -p $GLIDEIN_LOCK; then
	error "Unable to create lock dir: $GLIDEIN_LOCK"
	exit 1
fi

# Add condor config entries
printf "\n\n" >> ${CONDOR_CONFIG}
echo "GLIDEIN_CONDOR_CONFIG = ${CONDOR_CONFIG}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_LOCAL_DIR = ${LOCAL_DIR}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_CONDOR_HOST = ${CONDOR_HOST}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_WALL_TIME = ${WALL_TIME}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_WALL_TIME_SECONDS = ${WALL_TIME_SECONDS}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_SBIN = ${INSTALL_PATH}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_IDLE_TIME = ${IDLE_TIME}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_IDLE_TIME_SECONDS = ${IDLE_TIME_SECONDS}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_GCB_ENABLE = ${GCB_ENABLE}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_GCB_BROKER = ${GCB_BROKER}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_DEBUG = ${DEBUG}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_IP_ADDR = ${IP_ADDR}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_X509_USER_PROXY = X509_USER_PROXY=${X509_USER_PROXY}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_SITE = ${SITE_NAME}" >> ${CONDOR_CONFIG}
echo "GLIDEIN_LOCK = ${GLIDEIN_LOCK}" >> ${CONDOR_CONFIG}

# Fork condor_master
echo "Starting condor_master on host ${HOSTNAME}"
PIDFILE="${LOCAL_DIR}/condor_master.pid"
${INSTALL_PATH}/condor_master -f -r ${WALL_TIME} -pidfile ${PIDFILE} &
MPID=$!

# If we get a signal, notify Condor, remove the local dir and exit
# Note: this doesn't always work for some reason. I am going to rewrite
# all these scripts in Perl some day
handle_signal ()
{
	# Notify condor
	kill $MPID
	
	# If not debugging then remove the local dir
	if [ "$DEBUG" = "D_ALWAYS" ]; then
		rm -rf ${LOCAL_DIR}
	fi
	exit 0
}
trap handle_signal SIGTERM SIGQUIT SIGINT

# Poll for the master to exit or the job to be killed
# Note: for some reason, breaking out of this loop doesn't work
while [ true ]; do

	# Sleep for a little while
	sleep 5
	
	# Did the master exit? (i.e. did the pid file disappear?)
	if [ ! -f "$PIDFILE" ]; then
		# If not debugging then remove the local dir
		if [ "$DEBUG" = "D_ALWAYS" ]; then
			rm -rf ${LOCAL_DIR}
		fi
		exit 0
	fi
	
	# Did the job get killed? (i.e. did the job dir go away?)
	if [ ! -d "$JOB_DIR" ]; then
		# Then kill the condor_master
		kill $MPID
	fi

done