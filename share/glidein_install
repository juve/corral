#!/bin/sh
#
# Copyright 2007-2009 University Of Southern California
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Create status file if not interactive
if [ ! -t 0 ]; then
	STATUS=`pwd`/status
	touch $STATUS
fi

# Write error message to stderr and to status file if not interactive
error ()
{
	echo "$@" >&2
	if [ ! -t 0 ]; then
		echo "$@" >>$STATUS
	fi
}

# Usage
CMD=`basename $0`
usage ()
{
	error """Usage: $CMD OPTIONS -i <path> (-v <version> | -p <package>)

OPTIONS

  -i | -installPath <path>
      The path to install the Condor executables.
  -v | -condorVersion <version>
      The version of Condor to use. Ex: 7.0.0. Specify either -condorVersion
      or -condorPackage, but not both.
  -p | -condorPackage <tar.gz>
      The tar.gz archive to download. Default is gathered from system info.
      Ex: 7.0.0-x86-Linux-2.4-glibc2.3.tar.gz. The value can be a simple file
      name, an absolute path, or a URL. The protocols supported for URLs 
      include: file, http, https, ftp, and gsiftp. In all cases the value
      must end with .tar.gz. Specify either -condorVersion or -condorPackage,
      but not both.
  -r | -rls <url>
	  The replica location service URL where the package name can be looked
	  up to find an appropriate replica of the binary worker node package to
	  download. This is only used if the -v is specified or if -p is not an
	  absolute path or URL.
  -h | -help
      Display this usage message
"""
}

# If we have GLOBUS_LOCATION, then source the env script
if [ "${GLOBUS_LOCATION}" ]; then
	source $GLOBUS_LOCATION/etc/globus-user-env.sh
fi

# Find some stuff
GUC=`which globus-url-copy 2&>/dev/null || echo "${GLOBUS_LOCATION}/bin/globus-url-copy"`
RLS=`which globus-rls-cli 2&>/dev/null || echo "${GLOBUS_LOCATION}/bin/globus-rls-cli"`
WGET=`which wget 2&>/dev/null || echo "/usr/bin/wget"`

INSTALL_PATH=""
VERSION=""
PACKAGE=""
PACKAGE_URL=""
RLS_URL=""

while [ $# -ge 1 ]; do
	case $1 in
		-i | -installPath) INSTALL_PATH=$2 ;;
		-v | -condorVersion) VERSION=$2 ;;
		-p | -condorPackage) PACKAGE=$2 ;;
		-r | -rls) RLS_URL=$2 ;;
		-h | -help) usage ; exit 1 ;;
		*) error "Unknown argument: $1" ; exit 1 ;;
	esac
	shift
	shift
done

# Must specify path
if [ -z "${INSTALL_PATH}" ]; then
	error "Must specify -installPath"
	exit 1
fi

# Remove any shell variables
INSTALL_PATH=`eval "echo ${INSTALL_PATH}"`

# Make sure path is absolute
if ! echo ${INSTALL_PATH} | grep -q -E "^/"; then
	error "Install path must be absolute: ${INSTALL_PATH}"
	exit 1
fi

# Need either package or version
if [ -z "${PACKAGE}" ] && [ -z "${VERSION}" ]; then
	error "Please specify either -condorPackage or -condorVersion"
	exit 1
fi

# Validate version
if [ ! -z "$VERSION" ]; then
	if ! echo "$VERSION" | grep -q -E "^[0-9]+[.][0-9]+[.][0-9]+$"; then
		error "Invalid Condor version: $VERSION"
		exit 1
	fi
fi

# Validate package name
if [ ! -z "${PACKAGE}" ]; then
	if ! echo "$PACKAGE" | grep -q -E ".tar.gz$"; then
		error "Condor package must be .tar.gz: $PACKAGE"
		exit 1
	fi
fi

# Determine if -condorPackage is a URL or absolute path
if echo "$PACKAGE" | grep -q -E "(^/)|(^file)|(^gsiftp)|(^http)|(^ftp)"; then
	PACKAGE_URL=$PACKAGE
fi

# Determine package name if needed
if [ -z "$PACKAGE" ]; then

	# Determine package name
	os=`uname -s`
	case $os in
		Linux)
			# kernel and major versions only
			osver=`uname -r | cut -f1,2 -d.`
			arch=`uname -m`
			# change all the i486, i586, i686, etc to x86
			case $arch in
				i*86) arch="x86" ;;
			esac
			# glibc version, just major.minor
			glibc=`ldd --version | head -1 | cut -f4 -d" " | cut -f1,2 -d.`
			PACKAGE="${VERSION}-${arch}-${os}-${osver}-glibc${glibc}.tar.gz"
		;;
		SunOS)
			os="Solaris"
			arch=`uname -p`
			osver=`uname -r`
			case $osver in
				5.6) osver="2.6" ;;
				5.7) osver="7" ;;
				5.8) osver="8" ;;
				5.9) osver="9" ;;
				5.10) osver="10" ;;
			esac
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
		AIX)
			arch=`uname -p`
			osver="`uname -v`.`uname -r`"
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
		Darwin)
			os="MacOSX"
			arch=`uname -p`
			case $arch in
				powerpc64) arch="ppc64" ;;
				powerpc) arch="ppc" ;;
				i*86) arch="x86" ;;
			esac
			osver=`uname -r`
			case $osver in
				5.*) osver="10.1" ;;
				6.*) osver="10.2" ;;
				7.*) osver="10.3" ;;
				8.*) osver="10.4" ;;
				9.*) osver="10.5" ;;
				*) osver="unknown" ;;
			esac
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
		HP-UX)
			# arch will be either ia64 or PA-RISC
			arch=`uname -m`
			if [ "$arch" != "ia64" ]; then
				arch="PA-RISC"
			fi
			# uname -r => B.11.00
			osver=`uname -r | cut -f2,3 -d.`
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
		FreeBSD)
			arch=`uname -p`
			case $arch in
				i*86) arch="x86" ;;
			esac
			# Major version only
			# uname -r => 6.1-RELEASE-p15
			osver=`uname -r | cut -f1 -d- | cut -f1 -d.`
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
		*)
			arch=`uname -p`
			osver=`uname -r`
			PACKAGE="${VERSION}-${arch}-${os}-${osver}.tar.gz"
		;;
	esac
fi

# Initialize PACKAGE_URLS list
PACKAGE_URLS=""

# Find package URLs if needed
if [ -z "${PACKAGE_URL}" ]; then

	# Check to make sure we found globus-rls-cli
	if [ ! -x $RLS ]; then
		error "Unable to locate globus-rls-cli"
		exit 1
	fi

	# Get list of urls from RLS
	RESULTS=`$RLS query lrc lfn $PACKAGE $RLS_URL`
	rc=$?
	if [ $rc != 0 ]; then
		error "Unable to get package URL from RLS"
		exit 1
	fi
	OLD_IFS=$IFS
	IFS="
"
	for RESULT in "$RESULTS"; do
		URL=`echo $RESULT | cut -f2- -d:`
		PACKAGE_URLS="$PACKAGE_URLS$URL "
	done
	IFS=$OLD_IFS
else
	# The package url is the list
	PACKAGE_URLS="${PACKAGE_URL}"
fi

# Download Condor package
PACKAGE_PATH=`pwd`/package.tar.gz
for PACKAGE_URL in ${PACKAGE_URLS}; do

	if echo "${PACKAGE_URL}" | grep -q -E '(^/)'; then
	
		# If the url is an absolute path then copy it
		cp ${PACKAGE_URL} ${PACKAGE_PATH} 2>&1
		rc=$?
		
	elif echo "${PACKAGE_URL}" | grep -q -E '(^file)'; then
	
		# If the url is a file:// url, then copy it
		PACKAGE_URL=`echo "$PACKAGE_URL" | cut -d: -f2-`
		cp ${PACKAGE_URL} ${PACKAGE_PATH} 2>&1
		rc=$?
		
	elif echo "${PACKAGE_URL}" | grep -q -E '(^http)|(^ftp)'; then
	
		# If the url is http[s] or ftp, try wget
		
		# Check to make sure we have wget
		if [ ! -x $WGET ]; then
			error "Unable to locate wget"
			exit 1
		fi
		
		# Attempt to download package
		wget -q -O ${PACKAGE_PATH} "${PACKAGE_URL}" 2>&1
		rc=$?
		
	else
	
		# It must be a globus url, try guc
		
		# Check to make sure we have globus-url-copy
		if [ ! -x $GUC ]; then
			error "Unable to locate globus-url-copy"
			exit 1
		fi

		# Attempt to download package
		$GUC "${PACKAGE_URL}" file:${PACKAGE_PATH} 2>&1
		rc=$?
		
	fi

	# Stop if we were successful
	if [ $rc = 0 ] && [ -f ${PACKAGE_PATH} ]; then 
		# Break out of loop
		break
	else
		# Remove any zero-length files that may have been created
		rm -f ${PACKAGE_PATH}
	fi
done

# If package could not be downloaded from any server
if [ ! -f ${PACKAGE_PATH} ]; then
	error "Failed to retrieve binary worker package"
	exit 1
fi

# Make install directory if it doesn't exist
if [ ! -d ${INSTALL_PATH} ]; then
	mkdir -p ${INSTALL_PATH}
	if [ ! -d ${INSTALL_PATH} ]; then
		error "Unable to create remote install directory: ${INSTALL_PATH}"
		exit 1
	fi
fi

# Install package
cd ${INSTALL_PATH}
if ! tar -xzf ${PACKAGE_PATH}; then
	error "Failed to install Condor glidein package"
	exit 1
fi

exit 0
